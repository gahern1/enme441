import RPi.GPIO as GPIO
import socket
from urllib.parse import parse_qs

# --- GPIO Setup ---
GPIO.setmode(GPIO.BCM)
LEDpins = [17, 27, 22]
pwms = []

for pin in LEDpins:
    GPIO.setup(pin, GPIO.OUT)
    pwm = GPIO.PWM(pin, 1000)   # 1 kHz PWM frequency
    pwm.start(0)                # Start at 0% brightness
    pwms.append(pwm)

brightness = [0, 0, 0]  # Keep track of brightness for each LED

# --- HTML + JavaScript Page Generator ---
def html_page():
    html = f"""<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>LED Brightness Controller</title>
  <style>
    body {{ font-family: Arial; text-align: center; margin-top: 50px; }}
    .slider-container {{ margin: 20px auto; width: 300px; }}
    input[type=range] {{ width: 100%; }}
  </style>
</head>
<body>
  <h2>LED Brightness Controller</h2>

  <div class="slider-container">
    <label>LED 1</label><br>
    <input type="range" min="0" max="100" value="{brightness[0]}" id="led0" oninput="updateLED(0)">
    <span id="val0">{brightness[0]}</span>
  </div>

  <div class="slider-container">
    <label>LED 2</label><br>
    <input type="range" min="0" max="100" value="{brightness[1]}" id="led1" oninput="updateLED(1)">
    <span id="val1">{brightness[1]}</span>
  </div>

  <div class="slider-container">
    <label>LED 3</label><br>
    <input type="range" min="0" max="100" value="{brightness[2]}" id="led2" oninput="updateLED(2)">
    <span id="val2">{brightness[2]}</span>
  </div>

  <script>
  function updateLED(idx) {{
    let val = document.getElementById("led" + idx).value;
    document.getElementById("val" + idx).innerText = val;

    fetch("/", {{
      method: "POST",
      headers: {{ "Content-Type": "application/x-www-form-urlencoded" }},
      body: "led=" + idx + "&level=" + val
    }});
  }}
  </script>
</body>
</html>"""
    return html

# --- Helper to Get Local IP ---
def get_ip_address():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        # Doesn't have to be reachable
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
    except Exception:
        ip = "127.0.0.1"
    finally:
        s.close()
    return ip

# --- TCP/IP Web Server ---
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind(('', 8080))
server_socket.listen(1)

ip_address = get_ip_address()
print(f"üåê Server running at: http://{ip_address}:8080")

try:
    while True:
        conn, addr = server_socket.accept()
        request = conn.recv(1024).decode()

        if not request:
            conn.close()
            continue

        # Handle POST requests for LED control
        if 'POST' in request:
            body = request.split("\r\n\r\n")[-1]
            params = parse_qs(body)
            if 'led' in params and 'level' in params:
                idx = int(params['led'][0])
                level = int(params['level'][0])
                brightness[idx] = level
                pwms[idx].ChangeDutyCycle(level)
                print(f"LED {idx+1} brightness set to {level}%")

        # Send updated HTML page
        response = 'HTTP/1.1 200 OK\nContent-Type: text/html\n\n' + html_page()
        conn.sendall(response.encode())
        conn.close()

except KeyboardInterrupt:
    print("\nüõë Shutting down...")
    for pwm in pwms:
        pwm.stop()
    GPIO.cleanup()
    server_socket.close()
