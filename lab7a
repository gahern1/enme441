import RPi.GPIO as GPIO
import socket
from urllib.parse import parse_qs
import os

# --- GPIO Setup ---
GPIO.setmode(GPIO.BCM)
led_pins = [17, 27, 22]
led_pwms = []

for pin in led_pins:
    GPIO.setup(pin, GPIO.OUT)
    pwm = GPIO.PWM(pin, 1000)  # 1 kHz
    pwm.start(0)
    led_pwms.append(pwm)

# Track LED brightness levels
led_levels = [0, 0, 0]

# --- HTML Page Generator ---
def generate_html():
    html_content = f"""<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Pi LED Controller</title>
  <style>
    body {{ font-family: Verdana, sans-serif; text-align: center; margin-top: 50px; }}
    .led-form {{ display: inline-block; text-align: left; }}
    input[type=range] {{ width: 100%; }}
  </style>
</head>
<body>
  <h2>Control Your LEDs</h2>
  <div class="led-form">
    <form method="POST">
      <label for="brightness">Brightness Level:</label><br>
      <input type="range" id="brightness" name="level" min="0" max="100" value="0"><br><br>

      <b>Choose LED:</b><br>
      <input type="radio" name="led" value="0" checked> LED A ({led_levels[0]}%)<br>
      <input type="radio" name="led" value="1"> LED B ({led_levels[1]}%)<br>
      <input type="radio" name="led" value="2"> LED C ({led_levels[2]}%)<br><br>

      <input type="submit" value="Update">
    </form>
  </div>
</body>
</html>"""
    return html_content

# --- Server Setup ---
HOST = ''
PORT = 8080
local_ip = os.popen("hostname -I").read().split()[0]
print(f"üåê Access the server at: http://{local_ip}:{PORT}/")

with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server:
    server.bind((HOST, PORT))
    server.listen(1)

    try:
        while True:
            client_conn, client_addr = server.accept()
            with client_conn:
                request_data = client_conn.recv(1024).decode('utf-8', errors='ignore')

                if not request_data:
                    continue

                headers, _, body = request_data.partition('\r\n\r\n')

                if headers.startswith('POST'):
                    form_data = parse_qs(body)
                    selected_led = int(form_data.get('led', [0])[0])
                    brightness_val = int(form_data.get('level', [0])[0])

                    led_levels[selected_led] = brightness_val
                    led_pwms[selected_led].ChangeDutyCycle(brightness_val)

                page = generate_html()
                http_response = (
                    "HTTP/1.1 200 OK\r\n"
                    "Content-Type: text/html\r\n"
                    f"Content-Length: {len(page)}\r\n"
                    "Connection: close\r\n"
                    "\r\n" +
                    page
                )
                client_conn.sendall(http_response.encode('utf-8'))

    except KeyboardInterrupt:
        print("\nüõë Shutting down server...")
    finally:
        for pwm in led_pwms:
            pwm.stop()
        GPIO.cleanup()

